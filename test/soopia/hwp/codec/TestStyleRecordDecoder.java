package soopia.hwp.codec;

import static org.junit.Assert.*;

import java.io.UnsupportedEncodingException;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import soopia.hwp.TestUtils;
import soopia.hwp.type.HwpContext;
import soopia.hwp.type.record.StyleRecord;
import soopia.hwp.type.stream.RecordHeader;
import soopia.hwp.util.ByteArraySource;

public class TestStyleRecordDecoder {

	static byte [] DATA = new byte[]{
		/* index 00 */
		0x1A, 0x04, 0x00, 0x02, 
		0x03, 0x00, 
		0x14, (byte)0xBC, (byte)0xD5, (byte)0xD0, 0x00, (byte)0xAE, 
		0x06, 0x00, 
		0x4E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6C, 0x00, 
		0x00, 0x00,	0x12, 0x04,	0x0C, 0x00, 0x00, 0x00,	0x00, 0x00, 
		/* index 01 */
		0x1A, 0x04, (byte)0xA0, 0x01, 
		0x02, 0x00, 
		0x74, (byte)0xC7, (byte)0x84, (byte)0xB9, 
		0x04, 0x00, 
		0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 
		0x01, 0x01, 0x12, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
		/* index 02 */
		0x1A, 0x04, (byte)0xE0,	0x02, 
		0x04, 0x00, 
		0x38, (byte)0xBB, 0x1C, (byte)0xC1, (byte)0xF8,	(byte)0xBC, 0x38, (byte)0xBB, 
		0x0C, 0x00, 
		0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6E,0x00, 0x74, 0x00, 0x53, 0x00, 0x74, 0x00, 0x79, 0x00, 0x6C, 0x00, 0x65, 0x00, 
		0x00, 0x02, 0x12, 0x04, 0x0D, 0x00, 0x06, 0x00, 0x00, 0x00, 
		/* index 03 */
		0x1A, 0x04, (byte)0xC0, 0x01, 
		0x02, 0x00, 
		0x1C, (byte)0xC8, (byte)0xA9,(byte)0xBA, 
		0x05, 0x00, 
		0x54, 0x00, 0x69, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x65, 0x00, 
		0x00, 0x02, 0x12, 0x04, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 
		/* index 04 */
		0x1A, 0x04, (byte)0xA0, 0x01, 
		0x02, 0x00, 
		(byte)0xF8, (byte)0xBC, 0x38,(byte)0xBB, 
		0x04, 0x00, 
		0x42, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x79, 0x00, 
		0x00, 0x04, 0x12, 0x04, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 05 */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20,	0x00, 0x31, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x31, 0x00, 
		0x00, 0x05, 0x12, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 06 */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20, 0x00, 0x32, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x32, 0x00, 
		0x00, 0x06, 0x12, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 07 */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20, 0x00, 0x33, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x33, 0x00, 
		0x00, 0x07, 0x12, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 08 */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20, 0x00, 0x34, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x34, 0x00, 
		0x00, 0x08, 0x12, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 09 */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20, 0x00, 0x35, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x35, 0x00, 
		0x00, 0x09, 0x12, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 0A */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20, 0x00, 0x36, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x36, 0x00, 
		0x00, 0x0A, 0x12, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 0B */
		0x1A, 0x04, (byte)0x80, 0x02, 
		0x04, 0x00, 
		0x1C, (byte)0xAC, (byte)0x94, (byte)0xC6, 0x20, 0x00, 0x37, 0x00, 
		0x09, 0x00, 
		0x4F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x37, 0x00, 
		0x00, 0x0B, 0x12, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
		/* index 0C */
		0x1A, 0x04, (byte)0xC0, 0x02, 
		0x04, 0x00, 
		(byte)0xBD,	(byte)0xCA, 0x20, 0x00, (byte)0x88, (byte)0xBC, 0x38, (byte)0xD6, 
		0x0B, 0x00, 
		0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x65, 0x00, 0x72, 0x00, 
		0x00, 0x0C, 0x12, 0x04, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 
		/* index 0D */
		0x1A, 0x04, 0x00, 0x02, 
		0x03, 0x00, 
		0x38, (byte)0xBA, (byte)0xAC, (byte)0xB9, (byte)0xD0, (byte)0xB9, 
		0x06, 0x00, 
		0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 
		0x00, 0x0D, 0x12, 0x04, 0x0A, 0x00, 0x02, 0x00, 0x00, 0x00, 
		/* index 0E */
		0x1A, 0x04, 0x20, 0x02, 
		0x02, 0x00, 
		0x01, (byte)0xAC, (byte)0xFC, (byte)0xC8, 
		0x08, 0x00, 
		0x46, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00, 
		0x00, 0x0E, 0x12, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
		/* index 0F */
		0x1A, 0x04, 0x00, 0x02, 
		0x02, 0x00, 
		(byte)0xF8, (byte)0xBB, (byte)0xFC, (byte)0xC8, 
		0x07, 0x00, 
		0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00, 
		0x00, 0x0F, 0x12, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
		/* index 10 */
		0x1A, 0x04, (byte)0xA0, 0x01, 
		0x02, 0x00, 
		0x54, (byte)0xBA, (byte)0xA8, (byte)0xBA, 
		0x04, 0x00, 
		0x4D, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 
		0x00, 0x10, 0x12, 0x04, 0x0B, 0x00, 0x04, 0x00, 0x00, 0x00
	};
	static StyleRecordDecoder decoder ;
	StyleRecord record ;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		decoder = new StyleRecordDecoder();
	}

	@Before
	public void setUp() throws Exception {
		
	}

	@After
	public void tearDown() throws Exception {
		
	}

	@Test
	public void test_style() throws UnsupportedEncodingException, DecodingException {
		ByteArraySource data = new ByteArraySource(DATA);
		MockDocInfo docInfo = TestUtils.newMockDocInfo(DATA);
		RecordHeader header = TestUtils.newRecordHeader(data.mark());
		
		// decoding
		data.rollback();
		for( int i = 0 ; i <= 0x10 ; i++ ) {
			record = new StyleRecord(header, docInfo);
			record = decoder.decode(record, data, docInfo.getHwpContext());
			docInfo.addRecord(record);
		}
		assertTrue ( data.remaining() == 0 ) ;
		
		HwpContext ctx = docInfo.getHwpContext();
		assertEquals (0x11, ctx.getStyleSize());
		
		record = ctx.getStyleAt(1); // second style
		/*
		 * 0x1A, 0x04, (byte)0xA0, 0x01, 
		 * 0x02, 0x00, 
		 * 0x74, (byte)0xC7, (byte)0x84, (byte)0xB9, 
		 * 0x04, 0x00, 
		 * 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 
		 * 0x01, 0x01, 0x12, 0x04, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
		 */
		assertEquals ("ÀÌ¸§", record.getStyleNameKr());
		assertEquals ("Name", record.getStyleNameEn());
		assertTrue ( record.isFontStyle());
		assertTrue ( record == ctx.getStyleAt(record.getNextStyleId().getValue()));
		assertEquals(0x412, record.getUnknown0412().getValue().intValue());
	}
}
