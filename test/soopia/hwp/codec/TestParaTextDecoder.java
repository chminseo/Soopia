package soopia.hwp.codec;

import static org.junit.Assert.*;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import soopia.hwp.Constant;
import soopia.hwp.type.IRecordStructure;
import soopia.hwp.util.MockRecordStructure;

public class TestParaTextDecoder {

//	static byte [] textData = new byte[]{
//			0x43, 0x04, 0x60, 0x07,
//			0x02, 0x00,	0x64, 0x63, 0x65, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
//			0x02, 0x00,	0x64, 0x6C, 0x6F, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
//			0x41, 0x00,	0x41, 0x00, 
//			0x09, 0x00, 0x60, 0x22, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 
//			0x42, 0x00, 0x42, 0x00, 
//			0x09, 0x00, 0x60, 0x22, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 
//			0x43, 0x00, 0x43, 0x00, 
//			0x09, 0x00, 0x60, 0x22, 0x00, 0x00,	0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 
//			0x44, 0x00, 0x44, 0x00, 
//			0x09, 0x00,	0x60, 0x22, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 
//			0x45, 0x00,	0x45, 0x00, 
//			0x0D, 0x00
	static byte [] textData = new byte[]{
		0x43, 0x04, 0x20, 0x22, 0x57, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6E, 0x00, 
		0x20, 0x00, 0x43, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x64, 0x00, 0x69, 0x00, 
		0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 
		0x33, 0x00, 0x35, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 
		0x73, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x62, 0x00, 0x79, 0x00, 0x20, 0x00, 0x68, 0x00, 
		0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 
		0x20, 0x00, 0x77, 0x00, 0x69, 0x00, 0x66, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 
		0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x72, 0x00, 
		0x65, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x20, 0x00, 0x73, 0x00, 0x75, 0x00, 
		0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 
		0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x61, 0x00, 
		0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x77, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
		0x20, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x6E, 0x00, 
		0x20, 0x00, 0x62, 0x00, 0x79, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x61, 0x00, 
		0x2C, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x72, 0x00, 0x74, 0x00, 0x68, 0x00, 0x61, 0x00, 
		0x63, 0x00, 0x6E, 0x00, 0x75, 0x00, 0x74, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x62, 0x00, 0x65, 0x00, 
		0x63, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 
		0x67, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x6E, 0x00, 
		0x6D, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x2E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 
		0x67, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x72, 0x00, 0x65, 0x00, 
		0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x75, 0x00, 
		0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x2C, 0x00, 
		0x20, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 
		0x2C, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 
		0x66, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x72, 0x00, 0x65, 0x00, 0x74, 0x00, 
		0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 
		0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 
		0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x76, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 
		0x74, 0x00, 0x20, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6D, 0x00, 0x6F, 0x00, 
		0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6E, 0x00, 
		0x64, 0x00, 0x20, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x68, 0x00, 0x61, 0x00, 0x70, 0x00, 
		0x73, 0x00, 0x20, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x65, 0x00, 
		0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x20, 0x00, 0x48, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6F, 0x00, 
		0x6C, 0x00, 0x64, 0x00, 0x20, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6B, 0x00, 0x69, 0x00, 
		0x6E, 0x00, 0x67, 0x00, 0x2E, 0x00, 0x20, 0x00, 0x0D, 0x00	};
	static ByteBuffer buf = ByteBuffer.allocate(textData.length);
	
	@BeforeClass
	public static void setUp() throws Exception {
		buf.put(textData);
	}

	@AfterClass
	public static void tearDown() throws Exception {
		
	}

	@Test
	public void test_decoding_paratext() {
		ParaTextDecoder decoder = new ParaTextDecoder();
		IRecordStructure irs = new ByteRecordStructure(textData);
		decoder.decode(irs);
	}
	
	@Test
	public void test_character_decoder () {
		;
	}
	static class ByteRecordStructure extends MockRecordStructure{
		byte [] data ;
		public ByteRecordStructure (byte [] paraTextBytes){
			super ( paraTextBytes);
			this.data = paraTextBytes;
		}
		
		@Override
		public ByteBuffer getBuffer() {
			return buf;
		}
		
		@Override
		public String getStrucureName() {
			return Constant.PARA_TEXT;
		}
	}

}
